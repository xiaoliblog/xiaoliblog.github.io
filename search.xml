<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>工作笔记🎯如何优雅处理响应数据</title>
      <link href="/posts/52622.html"/>
      <url>/posts/52622.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h1><h2 id="复杂数据"><a href="#复杂数据" class="headerlink" title="复杂数据"></a>复杂数据</h2><ul><li>实际工作中经常会收到后端各种奇葩的数据格式，对应复杂的数据需要进行有效消息的提炼，就需要对JSON数据进行处理，比如如下格式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonStr = &#123;</span><br><span class="line">  <span class="title class_">Code</span>: <span class="number">10000</span>,</span><br><span class="line">  <span class="title class_">Message</span>: <span class="string">&quot;成功&quot;</span>,</span><br><span class="line">  <span class="title class_">Time</span>: <span class="string">&quot;2018-11-01 11:09:08&quot;</span>,</span><br><span class="line">  <span class="title class_">Result</span>: &#123;</span><br><span class="line">    <span class="attr">rData</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;V1&quot;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#2dc6c8&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">15</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;V2&quot;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#b6a2dd&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">30</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;V3&quot;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#5ab1ee&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">15</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;V4&quot;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#d7797f&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&quot;V5&quot;</span>,</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#FFB800&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果有用的信息就只有<code>rData</code>，如下所示，JSON格式化推荐<a href="https://www.baidufe.com/fehelper/index/index.html">https://www.baidufe.com/fehelper/index/index.html</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 转成</span></span><br><span class="line"><span class="keyword">let</span> result = [</span><br><span class="line">   [<span class="number">20</span>, <span class="string">&quot;#2dc6c8&quot;</span>, <span class="string">&quot;V1&quot;</span>],</span><br><span class="line">   [<span class="number">15</span>, <span class="string">&quot;#b6a2dd&quot;</span>, <span class="string">&quot;V2&quot;</span>],</span><br><span class="line">   [<span class="number">30</span>, <span class="string">&quot;#5ab1ee&quot;</span>, <span class="string">&quot;V3&quot;</span>],</span><br><span class="line">   [<span class="number">15</span>, <span class="string">&quot;#d7797f&quot;</span>, <span class="string">&quot;V4&quot;</span>],</span><br><span class="line">   [<span class="number">20</span>, <span class="string">&quot;#FFB800&quot;</span>, <span class="string">&quot;V5&quot;</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.在异步调用成功后，将返回的串转为对象</span></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(jsonStr))  <span class="comment">/*将json串转化为model对象*/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 然后取rData的值</span></span><br><span class="line"><span class="keyword">let</span> arrObj = obj.<span class="property">Result</span>.<span class="property">rData</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arrObj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 遍历arrObj对象中的每个子集对象</span></span><br><span class="line"><span class="keyword">let</span> arr = []</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> arrObj) &#123;</span><br><span class="line">    <span class="keyword">var</span> tempArr = []</span><br><span class="line">    <span class="comment">// 将每个小子集加到临时数组中</span></span><br><span class="line">    tempArr.<span class="title function_">push</span>(arrObj[i].<span class="property">count</span>,arrObj[i].<span class="property">color</span>,arrObj[i].<span class="property">title</span>)</span><br><span class="line">    <span class="comment">// 完成后加到大数组</span></span><br><span class="line">    arr.<span class="title function_">push</span>(tempArr)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line"><span class="comment">// 另外赋常用操作  将对象直接转数组，仅限于去掉第一层</span></span><br><span class="line"><span class="keyword">var</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(jsonStr)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array)</span><br></pre></td></tr></table></figure><h2 id="深层数据"><a href="#深层数据" class="headerlink" title="深层数据"></a>深层数据</h2><ul><li>有时候会获取对象深层次的属性值，比如如下数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后端接口返回数据</span></span><br><span class="line"><span class="keyword">let</span> res = &#123;</span><br><span class="line">  <span class="attr">code</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">msg</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">config</span>: &#123;</span><br><span class="line">      <span class="attr">style</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#f00&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">dataConfig</span>: &#123;</span><br><span class="line">      <span class="attr">x</span>: <span class="string">&quot;100&quot;</span>,</span><br><span class="line">      <span class="attr">y</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以多层判断获取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span> &amp;&amp; res.<span class="property">data</span>.<span class="property">config</span> &amp;&amp; res.<span class="property">data</span>.<span class="property">config</span>.<span class="property">style</span> &amp;&amp; res.<span class="property">data</span>.<span class="property">config</span>.<span class="property">style</span>.<span class="property">color</span>)</span><br><span class="line"><span class="comment">// 获取使用ES语法，需要考虑兼容性问题</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>?.<span class="property">config</span>?.<span class="property">style</span>?.<span class="property">color</span>)</span><br></pre></td></tr></table></figure><ul><li>上述方法存在不安全及兼容性问题，可以自定义一个更好的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">safeGet</span> = (<span class="params">obj, path</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 转成数组</span></span><br><span class="line">  <span class="keyword">const</span> keys = path.<span class="title function_">split</span>(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> keys) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">      obj = obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> data = <span class="title function_">safeGet</span>(res, <span class="string">&quot;data.config.style.color&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);  <span class="comment">// #foo</span></span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li>如果有一串后端的数据是JSON对象，需要转成数组形式拿取数据，比如如下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = &#123;</span><br><span class="line">  <span class="attr">beijin</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">shanghai</span>: <span class="number">60</span>,</span><br><span class="line">  <span class="attr">shenzhen</span>: <span class="number">80</span>,</span><br><span class="line">  <span class="attr">guangzhou</span>: <span class="number">90</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要转成如下数据</span></span><br><span class="line"><span class="comment">// let Really = [</span></span><br><span class="line"><span class="comment">//   &#123; name: beijin, value: 100 &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: shanghai, value: 60 &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: shenzhen, value: 80 &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: guangzhou, value: 90 &#125;,</span></span><br><span class="line"><span class="comment">// ];</span></span><br></pre></td></tr></table></figure><ul><li>我们可以转成数组，并为键自定义名称</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">objTArr</span> = (<span class="params">data, realName, realValue</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="title class_">Object</span>.<span class="title function_">keys</span>(data).<span class="title function_">map</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; [realName]: key, [realValue]: data[key] &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = <span class="title function_">objTArr</span>(result, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xiaoliblog/image/BlogImage/20220103134828.png"></p><h2 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h2><ul><li>如果有两个数组对象，需要合并相关内容进行分组，比如如下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gradeList = [</span><br><span class="line">  &#123; <span class="attr">grade1</span>: <span class="string">&quot;一年级&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">grade2</span>: <span class="string">&quot;二年级&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">grade3</span>: <span class="string">&quot;三年级&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> studentsList = [</span><br><span class="line">  &#123; <span class="attr">grade1</span>: [<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;小张&quot;</span>, <span class="string">&quot;小赵&quot;</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">grade1</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">grade1</span>: [<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;John&quot;</span>] &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理成如下数据</span></span><br><span class="line"><span class="keyword">const</span> studen = [&#123; <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">grade</span>: <span class="string">&quot;一年级&quot;</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> gradeList = [</span><br><span class="line">  &#123; <span class="attr">grade1</span>: <span class="string">&quot;一年级&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">grade2</span>: <span class="string">&quot;二年级&quot;</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">grade3</span>: <span class="string">&quot;三年级&quot;</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> studentsList = [</span><br><span class="line">  &#123; <span class="attr">grade1</span>: [<span class="string">&quot;小明&quot;</span>, <span class="string">&quot;小张&quot;</span>, <span class="string">&quot;小赵&quot;</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">grade2</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>] &#125;,</span><br><span class="line">  &#123; <span class="attr">grade3</span>: [<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;John&quot;</span>] &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理成如下数据</span></span><br><span class="line"><span class="keyword">const</span> student = [&#123; <span class="attr">name</span>: <span class="string">&quot;小明&quot;</span>, <span class="attr">grade</span>: <span class="string">&quot;一年级&quot;</span> &#125;];</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">parseDataFn</span> = (<span class="params">data, list</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = data[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> list[i]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; item[key].<span class="property">length</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">const</span> nameVal = item[key][j];</span><br><span class="line">        result.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: nameVal ,<span class="attr">grade</span>:list[i][key] &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = <span class="title function_">parseDataFn</span>(studentsList, gradeList);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/xiaoliblog/image/BlogImage/20220103140212.png"></p><h2 id="条件排序"><a href="#条件排序" class="headerlink" title="条件排序"></a>条件排序</h2><ul><li>有一个根据返回的时间排序的需求，比如如下数据，根据<code>executetime</code>正序排列</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonStr= [</span><br><span class="line">    &#123; </span><br><span class="line">      <span class="attr">id</span>:<span class="string">&#x27;01&#x27;</span>, </span><br><span class="line">      <span class="attr">executetime</span>: <span class="number">1625556657935</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">      <span class="attr">id</span>:<span class="string">&#x27;02&#x27;</span>,</span><br><span class="line">      <span class="attr">executetime</span>: <span class="number">1631782536000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>:<span class="string">&#x27;03&#x27;</span>,</span><br><span class="line">      <span class="attr">executetime</span>: <span class="number">1640854860000</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>这里使用JavaScript <code>sort()</code> 方法，首先解释下这个<code>sort</code>的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sortby: 可选，规定排序顺序。必须是函数</span></span><br><span class="line">arrayObject.<span class="title function_">sort</span>(sortby)   </span><br></pre></td></tr></table></figure><ul><li>如果调用该方法时没有使用参数，将按字母顺序对数组中的元素进行排序，说得更精确点，是按照字符编码的顺序进行排序。要实现这一点，首先应把数组的元素都转换成字符串（如有必要），以便进行比较</li><li>如果想按照其他标准进行排序，就需要提供比较函数，该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 <code>a</code> 和 <code>b</code>，其返回值如下<ul><li>若 <code>a</code> 小于 <code>b</code>，在排序后的数组中 <code>a</code> 应该出现在 <code>b</code> 之前，则返回一个小于 0 的值</li><li>若 <code>a</code> 等于 <code>b</code>，则返回 0</li><li>若 <code>a</code> 大于 <code>b</code>，则返回一个大于 0 的值</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sortByTime</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> a.<span class="property">executetime</span> - b.<span class="property">executetime</span>;</span><br><span class="line">&#125;</span><br><span class="line">jsonStr.<span class="title function_">sort</span>(sortByTime)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonStr)</span><br></pre></td></tr></table></figure><ul><li>也可以实现倒序排列，只需要对调参数即可</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sortByTime</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> b.<span class="property">executetime</span> - a.<span class="property">executetime</span>;</span><br><span class="line">&#125;</span><br><span class="line">jsonStr.<span class="title function_">sort</span>(sortByTime)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jsonStr)</span><br></pre></td></tr></table></figure><h2 id="条件过滤"><a href="#条件过滤" class="headerlink" title="条件过滤"></a>条件过滤</h2><ul><li>对于后端的数据，我们需要提取有用的数据，所以需要对数据进行过滤处理</li><li><code>filter()</code> 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素<ul><li><code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>true</code>还是<code>false</code>决定保留还是丢弃该元素</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>), thisValue)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 筛选数组中的偶数</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">let</span> result = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">num</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> num % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)  <span class="comment">// [2,4,6,8,10]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 筛选获取数据中已发布的数据</span></span><br><span class="line"><span class="keyword">let</span> filterData = res.<span class="property">data</span>.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> res.<span class="property">stateName</span> == <span class="string">&quot;已发布&quot;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>利用<code>filter</code>，可以巧妙地去除Array的重复元素。<code>indexOf</code>总是返回第一个元素的位置，后续的重复元素位置与<code>indexOf</code>返回的位置不相等，因此被<code>filter</code>滤掉了，所以重复的元素仅会保留第一个位置的元素</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;strawberry&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;pear&quot;</span>,<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;strawberry&quot;</span>];</span><br><span class="line">result = arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">element, index, self</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> self.<span class="title function_">indexOf</span>(element) === index;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">alert</span>(result.<span class="title function_">toString</span>());</span><br></pre></td></tr></table></figure><ul><li><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>];</span><br><span class="line"><span class="comment">// const map = array1.map(x =&gt; x *2);</span></span><br><span class="line"><span class="keyword">const</span> m = arr.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m); <span class="comment">// [2,8,18,32]</span></span><br></pre></td></tr></table></figure><ul><li>实际工作中，如果遍历数据时需要唯一标识，但返回的数据没有；可以通过<code>map</code>对数据添加一个<code>id</code>属性当唯一值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 截取十条数据，并为每条数据加id</span></span><br><span class="line"><span class="keyword">let</span> data = res.<span class="property">data</span>.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">10</span>).<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span>&#123;</span><br><span class="line">   item.<span class="property">id</span> = index++;</span><br><span class="line">   <span class="keyword">return</span> item</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="参数获取"><a href="#参数获取" class="headerlink" title="参数获取"></a>参数获取</h2><ul><li>有时候需要原生JS获取地址栏的参数，只需要对URL字符串<code>match</code>一个正则，就能获取一个所有参数键值对组成的数组，并通过<code>reduce</code>方法把键值对按<code>=</code>进行分割，全都保存在一个对象身上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取地址栏的方法</span></span><br><span class="line"><span class="keyword">let</span> urlStr1 = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line"><span class="keyword">let</span> urlStr2 = <span class="variable language_">document</span>.<span class="property">URL</span></span><br><span class="line"><span class="keyword">let</span> urlStr3 = <span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">&#x27;http://url.com/page?username=admin&amp;password=123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getURLParameters</span> = url =&gt; (url</span><br><span class="line">    .<span class="title function_">match</span>(<span class="regexp">/([^?=&amp;]+)(=([^&amp;]*))/g</span>) || [] )</span><br><span class="line">    .<span class="title function_">reduce</span>(<span class="function">(<span class="params">a,v</span>) =&gt;</span> (</span><br><span class="line">       (a[v.<span class="title function_">slice</span>(<span class="number">0</span>,v.<span class="title function_">indexOf</span>(<span class="string">&#x27;=&#x27;</span>))] = v.<span class="title function_">slice</span>(v.<span class="title function_">indexOf</span>(<span class="string">&#x27;=&#x27;</span>) + <span class="number">1</span>), a)</span><br><span class="line">    ),&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">getURLParameters</span>(url);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// &#123; username: &#x27;admin&#x27;, password: &#x27;123&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h1 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h1><h2 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h2><ul><li>字符串方法对数据处理非常常用，关于查找有以下常用方法</li></ul><table><thead><tr><th align="center">方法</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>length</code></td><td align="center">获取字符串长度</td><td align="center"><code>str.length</code></td></tr><tr><td align="center"><code>indexOf()</code></td><td align="center">方法返回字符串中指定文本首次出现的索引（位置）</td><td align="center"><code>str.indexOf(&quot;a&quot;)</code></td></tr><tr><td align="center"><code>lastIndexOf()</code></td><td align="center">方法返回指定文本在字符串中最后一次出现的索引</td><td align="center"><code>str.lastIndexOf(&quot;a&quot;)</code></td></tr><tr><td align="center"><code>search()</code></td><td align="center">方法搜索特定值的字符串，并返回匹配的位置</td><td align="center"><code>str.search(&#39;c&#39;)</code></td></tr><tr><td align="center"><code>charAt(index)</code></td><td align="center">返回指定索引位置处的字符</td><td align="center"><code>str.charAt(2)</code></td></tr></tbody></table><ul><li>如果未找到文本， <code>indexOf()</code> 和 <code>lastIndexOf()</code> 均返回 <code>-1</code>；两种方法都接受作为检索起始位置的第二个参数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefc&quot;</span></span><br><span class="line"><span class="comment">// 从索引3即d开始找 第一个c的索引值为6</span></span><br><span class="line"><span class="keyword">let</span> pos = str.<span class="title function_">indexOf</span>(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><ul><li><code>lastIndexOf()</code> 方法向后进行检索（从尾到头），这意味着：假如第二个参数是 <code>3</code>，则从位置 <code>3</code> 开始倒着检索，直到字符串的起点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefc&quot;</span></span><br><span class="line"><span class="comment">// 从倒数索引3的d开始找到起点，第一个c的索引为2</span></span><br><span class="line"><span class="keyword">let</span> lastPos = str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>) <span class="comment">//2</span></span><br></pre></td></tr></table></figure><ul><li><code>indexOf()</code> 与 <code>search()</code>相差不大，区别在于<ul><li><code>search()</code> 方法无法设置第二个开始位置参数</li><li><code>indexOf()</code> 方法无法设置更强大的搜索值（正则表达式）</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用正则表达式执行搜索字符串中 &quot;w3school&quot; 的大小写不敏感的搜索：</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Visit W3School&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> n = str.<span class="title function_">search</span>(<span class="regexp">/w3school/i</span>);  <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><ul><li>字符串截取对数据处理非常重要，比如使用<code>slice</code>截取指定条数的数据等等</li></ul><table><thead><tr><th align="center">方法</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>slice(start, end)</code></td><td align="center">截取指定起始位置的字符串，不包括<code>end</code></td><td align="center"><code>str.slice(0,1)</code></td></tr><tr><td align="center"><code>substring(start,end)</code></td><td align="center">截取指定起始位置的字符串，不包括<code>end</code></td><td align="center"><code>str.substring(0,1)</code></td></tr><tr><td align="center"><code>substr(start, strLen)</code></td><td align="center">截取指定长度字符串</td><td align="center"><code>str.substr(0,3)</code></td></tr><tr><td align="center"><code>split(separator,limit)</code></td><td align="center">把一个字符串分割成片段创建一个字符串数组</td><td align="center"><code>split(&#39;&#39;,5)</code></td></tr></tbody></table><ul><li><code>slice</code>方法截取不包含<code>end</code>，如果某个参数为负，则从字符串的结尾开始计数；如果省略第二个参数，则该方法将裁剪字符串的剩余部分</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefc&quot;</span></span><br><span class="line"><span class="comment">// [0,3) ,不包括end</span></span><br><span class="line"><span class="keyword">let</span> res = str.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">3</span>) <span class="comment">// abc</span></span><br><span class="line"><span class="keyword">let</span> res = str.<span class="title function_">substr</span>(<span class="number">0</span>,<span class="number">3</span>) <span class="comment">// abc</span></span><br></pre></td></tr></table></figure><ul><li><code>split</code>方法中<code>separator</code>参数可以是一个字符串或一个正则表达式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcd&quot;</span></span><br><span class="line"><span class="keyword">let</span> res = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>)   <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> res = str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>,<span class="number">3</span>) <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">方法</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>replace()</code></td><td align="center">用另一个值替换在字符串中指定的值</td><td align="center"><code>str.replace(&#39;c&#39;,&#39;d&#39;)</code></td></tr><tr><td align="center"><code>concat()</code></td><td align="center">连接两个或多个字符串</td><td align="center"><code>str.concat(str1,str2)</code></td></tr><tr><td align="center"><code>toUpperCase()</code></td><td align="center">字符串转换为大写</td><td align="center"><code>str.toUpperCase()</code></td></tr><tr><td align="center"><code>toLowerCase()</code></td><td align="center">字符串转换为小写</td><td align="center"><code>str.toLowerCase()</code></td></tr><tr><td align="center"><code>trim()</code></td><td align="center">方法删除字符串两端的空白符</td><td align="center"><code>str.trim()</code></td></tr></tbody></table><ul><li><code>replace</code>方法不会改变调用它的字符串。它返回的是新字符串。并且只替换首个匹配；对大小写敏感，如需执行大小写不敏感的替换，请使用正则表达式 <code>/i</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefc&quot;</span></span><br><span class="line"><span class="comment">// 默认大小写敏感是匹配不到cd的</span></span><br><span class="line"><span class="keyword">let</span> res = str.<span class="title function_">replace</span>(<span class="regexp">/CD/i</span>,<span class="string">&#x27;g&#x27;</span>)  <span class="comment">// &quot;abgefc&quot;</span></span><br></pre></td></tr></table></figure><ul><li>请注意正则表达式不带引号。如需替换所有匹配，请使用正则表达式的 <code>g</code> 标志（用于全局搜索）：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefc&quot;</span></span><br><span class="line"><span class="comment">// 默认只替换首个匹配的</span></span><br><span class="line"><span class="keyword">let</span> res = str.<span class="title function_">replace</span>(<span class="regexp">/c/g</span>,<span class="string">&#x27;g&#x27;</span>) <span class="comment">// bcgdefg</span></span><br></pre></td></tr></table></figure><h1 id="数组处理"><a href="#数组处理" class="headerlink" title="数组处理"></a>数组处理</h1><h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><ul><li>数组遍历有以下几种遍历方法，各有优缺点</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通for循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化版 使用临时变量，将长度缓存起来，避免重复获取数组长度，当数组较大时优化效果才会比较明显</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, length = arr.<span class="property">length</span>; i &lt; length; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>forEach()</code>循环遍历数组，接收一个回调函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历数组 item参数是数组中的内容，index为其索引,array表示数组本身</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index,array</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line">obj.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">id</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>使用<code>map()</code>方法，原数组被映射成对应新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newArr = arr.<span class="title function_">map</span>(<span class="function">(<span class="params">value, index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value+<span class="string">&#x27;--&#x27;</span>+index);</span><br><span class="line">    <span class="keyword">return</span> value + <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>for....in</code> 方法是es5标准， 此方法遍历数组效率低，主要是用来循环遍历对象的属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> arr)&#123;</span><br><span class="line">    <span class="comment">// item为索引</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item+<span class="string">&quot;--&quot;</span>+arr[item]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 循环遍历对象的属性，js中动态获取key，得到某对象中相对应的value = obj[key]</span></span><br><span class="line"><span class="keyword">let</span> obj = [&#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key, obj[key]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &#123; a: 1 &#125;</span></span><br><span class="line"><span class="comment">// 1 &#123; b: 2 &#125;</span></span><br><span class="line"><span class="comment">// 2 &#123; c: 3 &#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>for...of</code>方法ES6支持</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="comment">// item不再是索引，而是每一项的结果</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组处理-1"><a href="#数组处理-1" class="headerlink" title="数组处理"></a>数组处理</h2><ul><li>数组有以下常用的方法</li></ul><table><thead><tr><th align="center">方法</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>toString()</code></td><td align="center">数组转换为数组值（逗号分隔）的字符串</td><td align="center"><code>arr.toString()</code></td></tr><tr><td align="center"><code>join() </code></td><td align="center">数组转为一某字符分隔的字符串</td><td align="center"><code>arr.join(&quot;*&quot;)</code></td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> str = arr.<span class="title function_">toString</span>(); <span class="comment">// Banana,Orange,Apple,Mango</span></span><br><span class="line"><span class="keyword">let</span> res = arr.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>); <span class="comment">// Banana-Orange-Apple-Mango</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">方法</th><th align="center">说明</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center"><code>pop()</code></td><td align="center">删除数组最后一个元素，返回删除的值</td><td align="center"><code>arr.pop(value)</code></td></tr><tr><td align="center"><code>push() </code></td><td align="center">在数组结尾处添加一个新的元素，返回新数组的长度</td><td align="center"><code>arr.push(value)</code></td></tr><tr><td align="center"><code>shift()</code></td><td align="center">删除首个数组元素</td><td align="center"><code>arr.shift()</code></td></tr><tr><td align="center"><code>unshift()</code></td><td align="center">在数组开头添加新元素</td><td align="center"><code>arr.unshift(value)</code></td></tr><tr><td align="center"><code>slice(start,end)</code></td><td align="center">截取指定索引的数组</td><td align="center"><code>arr.slice(0,2)</code></td></tr><tr><td align="center"><code>sort()</code></td><td align="center">数组排序</td><td align="center"><code>arr.sort()</code></td></tr></tbody></table><ul><li>默认情况下<code>sort</code>方法是按ASCII字母顺序排序的，而非我们认为是按数字大小排序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b; <span class="comment">// 从小到大</span></span><br><span class="line">  <span class="comment">// b - a; 从大到小</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
          <category> 工作笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
